"use client";
import { Answer, Chunk } from "@/types";
import { useEffect, useState } from "react";

const SurveyPage = () => {
  const [email, setEmail] = useState<string>("");
  const [emailSubmitted, setEmailSubmitted] = useState<boolean>(false);
  const [startTime, setStartTime] = useState<number>(Date.now());
  const [chunks, setChunks] = useState<Chunk[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [answers, setAnswers] = useState<Answer[]>([]);

  const [isDataSent, setIsDataSent] = useState(false);

  useEffect(() => {
    fetch("/books.csv")
      .then((res) => res.text())
      .then((text) => {
        const lines = text.split("\n");
        const headers = lines[0].split(",");
        const data = lines.slice(1).map((line) => {
          const values = line.split(",");
          return values.reduce((acc, value, index) => {
            acc[headers[index]] = value;
            return acc;
          }, {} as Record<string, string>);
        });

        const books = data.map((row) => {
          return {
            book_title: row.Title,
            orignal_id: row.Original_ID,
            generated_id: row.Generated_ID,
          };
        });

        const originalIndexes = Array.from({ length: 10 }, () =>
          Math.floor(Math.random() * books.length)
        );
        const generatedIndexes = Array.from({ length: 10 }, () =>
          Math.floor(Math.random() * books.length)
        );

        const fetchOriginalChunks = originalIndexes.map(async (index) => {
          const filepath = books[index].orignal_id;
          try {
            const res = await fetch(
              `https://raw.githubusercontent.com/MilosAlex/thesis-survey-data/main/survey_chunks/${filepath}`
            );
            const fetchedText = await res.text();
            return {
              chunk_id: filepath,
              source: "human",
              book_title: books[index].book_title,
              text: fetchedText,
            };
          } catch (err) {
            console.error("Error fetching file:", err);
            return null;
          }
        });

        const fetchGeneratedChunks = generatedIndexes.map(async (index) => {
          const filepath = books[index].generated_id;
          try {
            const res = await fetch(
              `https://raw.githubusercontent.com/MilosAlex/thesis-survey-data/main/survey_chunks/${filepath}`
            );
            const fetchedText = await res.text();
            return {
              chunk_id: filepath,
              source: "ai",
              book_title: books[index].book_title,
              text: fetchedText,
            };
          } catch (err) {
            console.error("Error fetching file:", err);
            return null;
          }
        });

        Promise.all([...fetchOriginalChunks, ...fetchGeneratedChunks]).then(
          (results) => {
            const allChunks = results.filter(
              (chunk): chunk is Chunk => chunk !== null
            );

            const shuffledChunks = allChunks.sort(() => Math.random() - 0.5);
            setChunks(shuffledChunks);
          }
        );
      });
  }, []);

  const sendAnswers = async (answers: Answer[]) => {
    const response = await fetch("/api/answers", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ email, answers }),
    });
    if (!response.ok) {
      console.error("Error sending answers:", response.statusText);
    } else {
      setIsDataSent(true);
    }
  };

  const handleAnswer = (guess: "human" | "ai") => {
    const currentChunk = chunks[currentIndex];

    const updatedAnswers = [
      ...answers,
      { ...currentChunk, user_guess: guess, time_ms: Date.now() - startTime },
    ];

    setAnswers(updatedAnswers);
    setStartTime(Date.now());

    const newIndex = currentIndex + 1;
    setCurrentIndex(newIndex);

    console.log(updatedAnswers);

    if (newIndex >= chunks.length) {
      sendAnswers(updatedAnswers);
    }
  };

  const handleEmailSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (email.trim()) {
      setEmailSubmitted(true);
      setStartTime(Date.now());
    }
  };

  if (!emailSubmitted) {
    return (
      <div className="max-w-md mx-auto p-4">
        <h1 className="text-3xl text-center font-bold mb-4">
          AI-generated or human-written?
        </h1>
        <p className="text-center mb-4">
          First of all, Thank you for being here! You’re about to take part in a
          survey where you’ll read 20 short book sections. Your task is simple:
          decide whether each one was written by a human or generated by AI.
        </p>
        <h2 className="text-xl text-center font-bold mb-4">
          Enter your email to start the survey
        </h2>
        <form onSubmit={handleEmailSubmit} className="flex flex-col gap-4">
          <input
            type="email"
            placeholder="you@example.com"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="border p-2 rounded-xl"
            required
          />
          <button
            type="submit"
            className="bg-blue-600 text-white px-4 py-2 rounded-xl"
          >
            Start Survey
          </button>
          <p className="text-center mb-4">
            I will email you the results of the survey once it is completed.
            Your email will not be used for any other purpose.
          </p>
        </form>
      </div>
    );
  }

  const current = chunks[currentIndex];

  if (currentIndex < chunks.length) {
    return (
      <div className="bg-white max-w-3xl mx-auto p-4 z-10">
        <h1 className="text-xl text-center font-bold mb-4">
          {currentIndex + 1} / {chunks.length}
        </h1>
        <article className="bg-white border p-4 rounded-xl mb-12 text-justify">
          <p className="text-black">{current?.text ?? "No text available"}</p>
        </article>
        <div className="fixed bottom-[80px] left-0 right-0 flex justify-center gap-4">
          <button
            onClick={() => handleAnswer("human")}
            className="bg-blue-600 text-white px-4 py-2 rounded-xl hover:bg-blue-700"
          >
            Written by someone
          </button>
          <button
            onClick={() => handleAnswer("ai")}
            className="bg-purple-600 text-white px-4 py-2 rounded-xl hover:bg-purple-700"
          >
            Generated with AI
          </button>
        </div>
      </div>
    );
  }

  const accuracy = answers.reduce(
    (acc, answer) => acc + (answer.user_guess === answer.source ? 1 : 0),
    0
  );
  const accuracyPercentage = Math.round((accuracy / answers.length) * 100);

  return (
    <div className="flex flex-col max-w-md mx-auto p-4">
      <h1 className="text-3xl text-center font-bold mb-4">
        {accuracyPercentage}% accuracy
      </h1>
      <h2 className="text-xl font-bold mb-4">
        Thank you for completing the survey!
      </h2>
      {!isDataSent && (
        <p className="mt-2">
          Saving your responses... Please wait for a moment...
        </p>
      )}
      {isDataSent && (
        <>
          <p className="text-green-500 mb-6">
            Your data has been saved successfully!
          </p>
          <p className="text-center mb-2">
            Still not tired? You can have another go:)
          </p>
          <button
            onClick={() => window.location.reload()}
            className="bg-blue-600 text-white px-4 py-2 rounded-xl mb-4"
          >
            Take the survey again
          </button>
        </>
      )}
    </div>
  );
};

export default SurveyPage;
